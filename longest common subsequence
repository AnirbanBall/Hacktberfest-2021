class Solution
{
    public:
    //Function to find length of longest increasing subsequence.
    int longestSubsequence(int n, int a[])
    {
        int *o=new int[n];
    o[0]=1;
    for(int i=1;i<n;i++)
    {o[i]=1;
        for(int j=i-1;j>=0;j--)
        {
            if(a[j]>=a[i])
            { continue;}
            int possibleanswer=o[j]+1;
            if(possibleanswer>o[i])
                o[i]=possibleanswer;
            
        }
    }
    int best=0;
    for(int i=0;i<n;i++)
    {
    if(best<o[i])
        best=o[i];}
        
    return best;

    
       // your code here
    }
};

// { Driver Code Starts.
int main()
{
    //taking total testcases
    int t,n;
    cin>>t;
    while(t--)
    {
        //taking size of array
        cin>>n;
        int a[n];
        
        //inserting elements to the array
        for(int i=0;i<n;i++)
            cin>>a[i];
        Solution ob;
        //calling method longestSubsequence()
        cout << ob.longestSubsequence(n, a) << endl;
    }
}
  // } Driver 
